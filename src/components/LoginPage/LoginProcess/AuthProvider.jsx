import React, { createContext, useContext, useState, useEffect, useRef } from 'react'
import authService from './ValidateLogin'  // ƒë∆∞·ªùng d·∫´n t·ªõi file authService
import SockJS from 'sockjs-client'
import { Stomp } from '@stomp/stompjs';
// 1. T·∫°o Context
const AuthContext = createContext()

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(() => authService.getCurrentUser())
  const [stompClient, setStompClient] = useState(null);
  const [connected, setConnected] = useState(false);
  const [isConnecting, setIsConnecting] = useState(false);
  const [onlineUsers, setOnlineUsers] = useState(new Set());
  // L·∫•y notify t·ª´ localStorage n·∫øu c√≥
  const [notify, setNotify] = useState(() => {
    try {
      const savedNotify = localStorage.getItem(`notifications_${user?.userID}`);
      return savedNotify ? JSON.parse(savedNotify) : [];
    } catch (e) {
      console.error("L·ªói khi ƒë·ªçc th√¥ng b√°o t·ª´ localStorage:", e);
      return [];
    }
  });
  const [subscriptions, setSubscriptions] = useState({});

  // T·ª± ƒë·ªông k·∫øt n·ªëi/ng·∫Øt k·∫øt n·ªëi khi user thay ƒë·ªïi
  useEffect(() => {
    if (user) {
      connectWebSocket();
    } else {
      disconnectWebSocket();
    }

    // Cleanup khi component unmount
    return () => {
      if (connected) {
        sendOfflineStatus();
        disconnectWebSocket();
      }
    };
  }, [user]);

  // L∆∞u notify v√†o localStorage khi n√≥ thay ƒë·ªïi
  useEffect(() => {
    if (user && notify) {
      try {
        localStorage.setItem(`notifications_${user.userID}`, JSON.stringify(notify));
      } catch (e) {
        console.error("L·ªói khi l∆∞u th√¥ng b√°o v√†o localStorage:", e);
      }
    }
  }, [notify, user]);

  // X·ª≠ l√Ω s·ª± ki·ªán ƒë·ªìng b·ªô th√¥ng b√°o gi·ªØa c√°c tab
  useEffect(() => {
    // H√†m x·ª≠ l√Ω khi c√≥ thay ƒë·ªïi t·ª´ tab kh√°c
    const handleStorageChange = (e) => {
      if (user && e.key === `notifications_${user.userID}`) {
        try {
          const newNotifications = JSON.parse(e.newValue);
          if (newNotifications && Array.isArray(newNotifications)) {
            setNotify(newNotifications);
            console.log("ƒê√£ ƒë·ªìng b·ªô th√¥ng b√°o t·ª´ tab kh√°c");
          }
        } catch (e) {
          console.error("L·ªói khi ƒë·ªìng b·ªô th√¥ng b√°o:", e);
        }
      }
    };

    window.addEventListener('storage', handleStorageChange);
    return () => window.removeEventListener('storage', handleStorageChange);
  }, [user]);

  // X·ª≠ l√Ω s·ª± ki·ªán ƒë√≥ng tab/tr√¨nh duy·ªát ƒë·ªÉ g·ª≠i tr·∫°ng th√°i offline
  useEffect(() => {
    const handleBeforeUnload = () => {
      sendOfflineStatus();
    }

    window.addEventListener('beforeunload', handleBeforeUnload);
    return () => window.removeEventListener('beforeunload', handleBeforeUnload);
  }, [connected]);

  // Sync khi storage thay ƒë·ªïi (v√≠ d·ª• user ƒëƒÉng nh·∫≠p t·ª´ tab kh√°c)
  useEffect(() => {
    const handleStorage = () => setUser(authService.getCurrentUser());
    window.addEventListener('storage', handleStorage);
    return () => window.removeEventListener('storage', handleStorage);
  }, []);

  // K·∫øt n·ªëi WebSocket
  const connectWebSocket = () => {
    if (!user || isConnecting || connected) return;

    setIsConnecting(true);

    // Ki·ªÉm tra xem ƒë√£ c√≥ k·∫øt n·ªëi kh√°c ch∆∞a (gi·ªØa c√°c tab)
    const existingConnectionId = sessionStorage.getItem(`wsConnection_${user.userID}`);
    const tabId = Date.now().toString(); // ID duy nh·∫•t cho tab hi·ªán t·∫°i

    // Th√™m gi√° tr·ªã ng·∫´u nhi√™n ƒë·ªÉ tr√°nh tr√πng l·∫∑p gi·ªØa c√°c tab ƒë∆∞·ª£c m·ªü c√πng l√∫c
    sessionStorage.setItem(`wsConnection_${user.userID}`, tabId);

    const socket = new SockJS('http://localhost:8080/ws');
    const stomp = Stomp.over(socket);

    // Header cho k·∫øt n·ªëi
    const headers = {
      'username': user.username,
      'tabId': tabId
    };

    stomp.connect(headers, (frame) => {
      console.log("üîå WebSocket ƒê√£ k·∫øt n·ªëi!", frame);

      // Th√™m b·ªô l·∫Øng nghe debug ƒë·ªÉ xem t·∫•t c·∫£ tin nh·∫Øn ƒë·∫øn
      stomp.debug = function (str) {
        console.log("STOMP Debug:", str);
      };

      setStompClient(stomp);
      setConnected(true);
      setIsConnecting(false);

      // In th√¥ng tin k·∫øt n·ªëi
      console.log("ƒê√£ k·∫øt n·ªëi v·ªõi user:", user.username);
      console.log("Session ID:", stomp.ws._transport.url.split('/').pop());
      console.log("Tab ID:", tabId);

      // G·ª≠i tr·∫°ng th√°i online sau khi k·∫øt n·ªëi th√†nh c√¥ng
      sendOnlineStatus(stomp);

      // ƒêƒÉng k√Ω nh·∫≠n c·∫≠p nh·∫≠t v·ªÅ tr·∫°ng th√°i ng∆∞·ªùi d√πng
      subscribeToUserStatuses(stomp);

      // ƒêƒÉng k√Ω nh·∫≠n c·∫≠p nh·∫≠t v·ªÅ th√¥ng b√°o
      subscribeToNotifications(stomp);

    }, (error) => {
      console.error("‚ùå L·ªói k·∫øt n·ªëi WebSocket:", error);
      setIsConnecting(false);
      setConnected(false);

      // Th·ª≠ k·∫øt n·ªëi l·∫°i sau 5 gi√¢y
      setTimeout(() => {
        if (user && !connected && !isConnecting) {
          connectWebSocket();
        }
      }, 5000);
    });

    // X·ª≠ l√Ω khi k·∫øt n·ªëi b·ªã ƒë√≥ng
    socket.onclose = () => {
      console.log("üîå K·∫øt n·ªëi WebSocket ƒë√£ ƒë√≥ng");
      setConnected(false);
      setStompClient(null);

      // X√≥a th√¥ng tin k·∫øt n·ªëi t·ª´ sessionStorage n·∫øu l√† tab s·ªü h·ªØu k·∫øt n·ªëi
      if (sessionStorage.getItem(`wsConnection_${user.userID}`) === tabId) {
        sessionStorage.removeItem(`wsConnection_${user.userID}`);
      }

      // Th·ª≠ k·∫øt n·ªëi l·∫°i sau 5 gi√¢y
      setTimeout(() => {
        if (user && !connected && !isConnecting) {
          connectWebSocket();
        }
      }, 5000);
    };
  };

  // ƒêƒÉng k√Ω nh·∫≠n th√¥ng b√°o tr·∫°ng th√°i ng∆∞·ªùi d√πng
  const subscribeToUserStatuses = (client = stompClient) => {
    if (client && user) {
      // H·ªßy ƒëƒÉng k√Ω c≈© n·∫øu c√≥
      if (subscriptions.statusSubscription) {
        try {
          subscriptions.statusSubscription.unsubscribe();
        } catch (e) {
          console.error("L·ªói khi h·ªßy ƒëƒÉng k√Ω tr·∫°ng th√°i:", e);
        }
      }

      const statusSub = client.subscribe(`/topic/status/${user.username}`, (message) => {
        try {
          const response = JSON.parse(message.body);
          console.log("üì• Nh·∫≠n c·∫≠p nh·∫≠t tr·∫°ng th√°i:", response);

          // X·ª≠ l√Ω th√¥ng b√°o tr·∫°ng th√°i ng∆∞·ªùi d√πng
          if (response.userId && response.online !== undefined) {
            setOnlineUsers(prev => {
              const newSet = new Set(prev); // T·∫°o b·∫£n sao c·ªßa Set hi·ªán t·∫°i

              if (response.online) {
                newSet.add(response.userId); // Ch·ªâ th√™m userId
              } else {
                newSet.delete(response.userId); // Ch·ªâ x√≥a userId
              }

              return newSet;
            });
          }

          // X·ª≠ l√Ω danh s√°ch ng∆∞·ªùi d√πng online
          if (response.onlineUsers && Array.isArray(response.onlineUsers)) {
            const onlineUserIds = response.onlineUsers
              .filter(user => user.online) // Ch·ªâ l·∫•y user online
              .map(user => user.userId); // L·∫•y danh s√°ch userId
            setOnlineUsers(new Set(onlineUserIds));
            console.log("ƒê√£ c·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi d√πng online:", onlineUserIds);
          }
        } catch (e) {
          console.error("L·ªói khi x·ª≠ l√Ω tr·∫°ng th√°i:", e);
        }
      });

      // L∆∞u subscription ƒë·ªÉ c√≥ th·ªÉ h·ªßy ƒëƒÉng k√Ω sau n√†y
      setSubscriptions(prev => ({ ...prev, statusSubscription: statusSub }));

      // Sau khi k·∫øt n·ªëi, g·ª≠i tr·∫°ng th√°i online ƒë·ªÉ server c·∫≠p nh·∫≠t
      sendOnlineStatus(client);

      // Y√™u c·∫ßu danh s√°ch ng∆∞·ªùi d√πng ƒëang online
      requestOnlineUsersList(client);
    }
  };

  // ƒêƒÉng k√Ω nh·∫≠n th√¥ng b√°o
  const subscribeToNotifications = (client = stompClient) => {
    if (client && user) {
      // H·ªßy ƒëƒÉng k√Ω c≈© n·∫øu c√≥
      if (subscriptions.notificationSubscription) {
        try {
          subscriptions.notificationSubscription.unsubscribe();
        } catch (e) {
          console.error("L·ªói khi h·ªßy ƒëƒÉng k√Ω th√¥ng b√°o:", e);
        }
      }

      const notifySub = client.subscribe(`/topic/notifications/${user.username}`, (message) => {
        console.log("üì• ƒê√£ nh·∫≠n th√¥ng b√°o:", message);
        try {
          const response = JSON.parse(message.body);

          // Ki·ªÉm tra xem response c√≥ ph·∫£i l√† m·∫£ng kh√¥ng
          if (Array.isArray(response)) {
            // N·∫øu l√† m·∫£ng (ph·∫£n h·ªìi t·ª´ requestNotificationsList), thay th·∫ø to√†n b·ªô
            // L·ªçc c√°c ph·∫ßn t·ª≠ h·ª£p l·ªá
            const validNotifications = response.filter(item => item && item.notificationID);
            console.log("Nh·∫≠n danh s√°ch th√¥ng b√°o t·ª´ server:", validNotifications);
            setNotify(validNotifications);
          } else if (response.notificationID) {
            // N·∫øu l√† m·ªôt th√¥ng b√°o ƒë∆°n l·∫ª v√† c√≥ id, th√™m v√†o n·∫øu ch∆∞a t·ªìn t·∫°i
            setNotify(prev => {
              // Ki·ªÉm tra xem th√¥ng b√°o ƒë√£ t·ªìn t·∫°i ch∆∞a
              if (prev.some(item => item.notificationID === response.notificationID)) {
                return prev; // Kh√¥ng th√™m n·∫øu ƒë√£ t·ªìn t·∫°i
              }
              const newNotify = [...prev, response]; // Th√™m n·∫øu ch∆∞a t·ªìn t·∫°i
              return newNotify;
            });
          } else {
            // Tr∆∞·ªùng h·ª£p kh√°c, c√≥ th·ªÉ l√† th√¥ng b√°o kh√¥ng c√≥ id
            console.log("Nh·∫≠n th√¥ng b√°o kh√¥ng c√≥ id:", response);
            // B·∫°n c√≥ th·ªÉ th√™m logic x·ª≠ l√Ω kh√°c t·∫°i ƒë√¢y
          }
        } catch (e) {
          console.error("L·ªói khi x·ª≠ l√Ω th√¥ng b√°o:", e);
        }
      });

      // L∆∞u subscription ƒë·ªÉ c√≥ th·ªÉ h·ªßy ƒëƒÉng k√Ω sau n√†y
      setSubscriptions(prev => ({ ...prev, notificationSubscription: notifySub }));

      // Y√™u c·∫ßu danh s√°ch th√¥ng b√°o
      requestNotificationsList(client);
    }
  };

  const requestNotificationsList = (client = stompClient) => {
    if (client && user) {
      const payload = { userId: user.userID, username: user.username };
      console.log("üì§ Y√™u c·∫ßu danh s√°ch th√¥ng b√°o");
      client.send('/app/status/get-notification', {}, JSON.stringify(payload));
    }
  };

  const requestOnlineUsersList = (client = stompClient) => {
    if (client && user) {
      const payload = { userId: user.userID, username: user.username };
      console.log("üì§ Y√™u c·∫ßu danh s√°ch ng∆∞·ªùi d√πng online");
      client.send('/app/status/get-online-users', {}, JSON.stringify(payload));
    }
  };

  // Ng·∫Øt k·∫øt n·ªëi WebSocket
  const disconnectWebSocket = () => {
    if (stompClient && connected) {
      // G·ª≠i tr·∫°ng th√°i offline tr∆∞·ªõc khi ng·∫Øt k·∫øt n·ªëi
      sendOfflineStatus(stompClient);

      // H·ªßy t·∫•t c·∫£ c√°c ƒëƒÉng k√Ω
      Object.values(subscriptions).forEach(subscription => {
        try {
          if (subscription && typeof subscription.unsubscribe === 'function') {
            subscription.unsubscribe();
          }
        } catch (e) {
          console.error("L·ªói khi h·ªßy ƒëƒÉng k√Ω:", e);
        }
      });

      // X√≥a danh s√°ch ƒëƒÉng k√Ω
      setSubscriptions({});

      // Ng·∫Øt k·∫øt n·ªëi
      stompClient.disconnect(() => {
        console.log("üîå WebSocket ƒë√£ ng·∫Øt k·∫øt n·ªëi");
        setConnected(false);
        setStompClient(null);
      });
    }
  };

  // G·ª≠i tr·∫°ng th√°i online
  const sendOnlineStatus = (client = stompClient) => {
    if (client && user) {
      const payload = { userId: user.userID };
      console.log("üì§ G·ª≠i tr·∫°ng th√°i online");
      client.send('/app/status/online', {}, JSON.stringify(payload));
    }
  };

  // G·ª≠i tr·∫°ng th√°i offline
  const sendOfflineStatus = (client = stompClient) => {
    if (client && connected && user) {
      const payload = { userId: user.userID };
      console.log("üì§ G·ª≠i tr·∫°ng th√°i offline");
      client.send('/app/status/offline', {}, JSON.stringify(payload));
    }
  };

  // Ki·ªÉm tra ng∆∞·ªùi d√πng c√≥ online kh√¥ng
  const isUserOnline = (userId) => {
    return onlineUsers.has(userId);
  };

  // X√≥a th√¥ng b√°o
  const clearNotification = (notificationId) => {
    setNotify(prev => prev.filter(notification => notification.notificationID !== notificationId));
    // ƒê·ªìng th·ªùi g·ª≠i request x√≥a th√¥ng b√°o ƒë·∫øn server n·∫øu c·∫ßn
    if (stompClient && connected && user) {
      const payload = { userId: user.userID, notificationId: notificationId };
      stompClient.send('/app/status/clear-notification', {}, JSON.stringify(payload));
    }
  };

  // X√≥a t·∫•t c·∫£ th√¥ng b√°o
  const clearAllNotifications = () => {
    setNotify([]);
    // ƒê·ªìng th·ªùi g·ª≠i request x√≥a t·∫•t c·∫£ th√¥ng b√°o ƒë·∫øn server n·∫øu c·∫ßn
    if (stompClient && connected && user) {
      const payload = { userId: user.userID };
      stompClient.send('/app/status/clear-all-notifications', {}, JSON.stringify(payload));
    }
  };

  // ƒê√°nh d·∫•u th√¥ng b√°o ƒë√£ ƒë·ªçc
  const markNotificationAsRead = (notificationId) => {
    setNotify(prev =>
      prev.map(notification =>
        notification.notificationID === notificationId
          ? { ...notification, isReadFlag: true }
          : notification
      )
    );

    // G·ª≠i c·∫≠p nh·∫≠t t·ªõi server n·∫øu c·∫ßn
    if (stompClient && connected && user) {
      const payload = { UserID: user.userID, notificationID: notificationId };
      stompClient.send('/app/status/mark-notification-read', {}, JSON.stringify(payload));
    }
  };

  const login = async (...args) => {
    const result = await authService.login(...args);
    if (result.success) {
      setUser(authService.getCurrentUser());
      // WebSocket s·∫Ω ƒë∆∞·ª£c k·∫øt n·ªëi t·ª± ƒë·ªông nh·ªù useEffect ph√≠a tr√™n
    }
    return result;
  };

  const logout = () => {
    disconnectWebSocket();
    // X√≥a th√¥ng b√°o kh·ªèi localStorage khi ƒëƒÉng xu·∫•t
    if (user) {
      localStorage.removeItem(`notifications_${user.userID}`);
    }
    authService.logout();
    setUser(null);
    setNotify([]);
  };

  return (
    <AuthContext.Provider value={{
      stompClient,
      user,
      connected,
      onlineUsers: Array.from(onlineUsers),
      notifications: notify,
      isUserOnline,
      clearNotification,
      clearAllNotifications,
      markNotificationAsRead, // Th√™m h√†m ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc
      login,
      logout
    }}>
      {children}
    </AuthContext.Provider>
  );
}

// Custom Hook
export const useAuth = () => {
  return useContext(AuthContext);
}